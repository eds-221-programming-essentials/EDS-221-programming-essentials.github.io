---
title: "Day 2: Tasks & activities - KEY"
subtitle: "Data types, indexing data, import & plot data"
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
#| message: false
#| warning: false

library(tidyverse)
library(janitor)
```

## Check data types

1. Create a vector called `vec_1` containing the following:

- What is the class of the vector? `class()`
- What type of variable does it store? `typeof()`
- Access the 3rd element and store as `vec_1_e3`
- Access the 1st element and store as `vec_1_e1`
- Access the 5th through 7th elements and store as `vec_1_e5to7`
- Reassign `vec_1` as a character using `as.character`, stored as `vec_1_char`. What does the output look like? 

::: {.callout-important}
## Solution
```{r}
vec_1 <- c(2, 5, 9, 10, 8, 12, 1, 0) # Create vector
vec_1 # View vector

class(vec_1) # Check vector class
typeof(vec_1) # Check data type

vec_1_e3 <- vec_1[3] # Extract 3rd element
vec_1_e3 # Print element

vec_1_e1 <- vec_1[1] # Extract 1st element
vec_1_e1 # Print element

vec_1_e5to7 <- vec_1[5:7] # Extract 5th-7th elements
vec_1_e5to7 # Print elements

vec_1_char <- as.character(vec_1) # Reassign to character vector
vec_1_logical <- as.logical(vec_1) # Reassign to logical vector
```
:::

2. Create a vector called `vec_2` of *named* elements, where `town = "Santa Barbara`, `location = "Rincon"`, `swell = "south"`

- Take a look at what you've made
- What is the class of vector elements? `class()`
- What is the length of vec_2?
- Access the 2nd element by name and store as `vec_2_e2`

::: {.callout-important}
## Solution
```{r}
vec_2 <- c(town = "Santa Barbara", location = "Rincon", swell = "south")
vec_2 # View vector

class(vec_2) # Check vector class
length(vec_2) # Check vector length

vec_2_e2 <- vec_2[2] # Extract 2nd element
vec_2_e2 # Print element
```
:::

3. Create a data frame in R

- Return the class of the entire data frame
- Return the class of the `species` column
- Find the maximum value of the `count()` column, store as `max_count`

::: {.callout-important}
## Solution
```{r}
df_1 <- data.frame(region = c("A", "B", "A","D"),
                   species = c("otter", "great white", "sea lion", "gray whale"),
                   count = c(12, 2, 36, 6))
```
:::

::: {.callout-important}
## Solution
```{r}
class(df_1) # Check df class

class(df_1$species) # Check species column class

max_count <- max(df_1$count) # Find maximum value of count column
max_count # Print maximum value
```
:::

## Wild data

```{r}
#| include: false
mack_verts <- read_csv(here::here("course-materials", "eod-practice", "data", "AS00601.csv"))

# View(mack_verts) # View dataset

mack_verts <- clean_names(mack_verts) # Update variable names to lower snake case
```

1. Read in the data using `read_csv()` with `here()`, store as `mack_verts`

::: {.callout-important}
## Solution
```{r}
#| eval: false

mack_verts <- read_csv(here::here("data", "AS00601.csv"))
View(mack_verts) # View dataset
```
:::

2. Update the variable names in `mack_verts` to lower snake case

::: {.callout-important}
## Solution
```{r}
#| eval: false

mack_verts <- clean_names(mack_verts) # Update to lower snake case
```
:::

3. In a new code chunk, practice accessing individual pieces of the data frame:
  - Store the 5th value in column **WEIGHT** as `mc_wt_5`
  - Store the 8th - 20th value in the **LENGTH1** column as `mc_length_8_20`
  - Store everything in column **SAMPLEDATE** as a vector called `mc_dates`

::: {.callout-important}
## Solution
```{r}
mc_wt_5 <- mack_verts[5, 'weight'] # Extract 5th value in column `weight`
mc_wt_5 # Print value

mc_length_8_20 <- mack_verts[8:20, 'length1'] # Extract 8th-20th values in column `length1`
mc_length_8_20 # Print values

mc_dates <- mack_verts[,'sampledate'] # Extract column `sampledate`
mc_dates <- mack_verts$sampledate # Extract column `sampledate`
```
:::

4. Create a subset that only contains observations for Pacific Giant Salamanders (species *Dicamptodon tenebrosus*, stored in `species` as `DITE`). Store the subset as `mc_salamanders`. *Hint:* see `dplyr::filter()`!

::: {.callout-important}
## Solution
```{r}
mc_salamanders <- mack_verts |>  
  filter(species == "DITE") # Keep rows where species == "DITE"
```
:::

5. Create a scatterplot of length1 (snout-vent length in millimeters) versus weight (grams) for all salamanders in the subset you created above, `mc_salamanders`

::: {.callout-important}
## Solution
```{r}
#| warning: false

salamander_plot <- ggplot(data = mc_salamanders,
                          aes(x = length1, y = weight)) + 
  geom_point(alpha = 0.5, color = "purple") +
  theme_minimal()

salamander_plot # View plot
```
:::

6. Export your scatterplot as `salamander_size.png` to your **figs** folder.

::: {.callout-important}
## Solution
```{r}
#| eval: false

ggsave(plot = salamander_plot, here::here("figs", "salamander_size.png"))
```
:::

7. Make a subset called `mc_trout` that only contains observations for cutthroat trout 

::: {.callout-important}
## Solution
```{r}
mc_trout <- mack_verts |> 
  filter(species == "ONCL") # Keep rows where species == "ONCL"
```
:::

8. Create a scatterplot of length1 by weight for all trout in the dataset
  - Customize so that the point color depends on *reach* 
  - Customize your color scheme (e.g. `scale_color_manual()`)
  - Facet your plot by creek reach (hint: `facet_wrap(~...)`)
  - Update graph axis labels and title
  - Export your graph as `cutthroat_size.png` to the `figs` folder

::: {.callout-important}
## Solution
```{r}
#| warning: false

unique(mc_trout$reach) # Check unique values in column

# Create named vector of custom colors
custom_colors <- c("L" = "darkblue", "M" = "darkgreen", "U" = "orange") 

ggplot(data = mc_trout, aes(x = length1, y = weight)) +
  geom_point(aes(color = reach)) +
  scale_color_manual(values = custom_colors) + # Assign custom colors
  facet_wrap(~reach) + # Facet by variable `reach`
  theme_minimal()
```
:::