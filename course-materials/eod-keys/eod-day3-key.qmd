---
title: "Day 3: Tasks & activities - KEY"
subtitle: "Conditionals & for loops"
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
```

## Conditional statements

1. Create an object called `pm2_5` with a value of 48 (representing Particulate Matter 2.5, an indicator for air quality, in $\frac{\mu g}{m^3}). Write an `if - else if - else` statement that returns "Low to moderate risk" if `pm2_5` is less than 100, "Unhealthy for sensitive groups" if PM 2.5 is 100 <= pm2_5 < 150, and "Health risk present"  if PM 2.5 is >= 150

::: {.callout-important}
## Solution
```{r}
pm2_5 <- 48

if (pm2_5 < 100) {
  print("Low to moderate health risk")
} else if (pm2_5 >= 100 & pm2_5 < 150) {
  print("Unhealthy for sensitive groups")
} else if (pm2_5 >= 150) {
  print("Health risk present")
}
```
:::

2. Store the string "blue whale" as an object called `species`. Write an if statement that returns "You found a whale!" if the string "whale" is detected in species, otherwise return nothing

::: {.callout-important}
## Solution
```{r}
species <- "gray whale"

if (str_detect(species, "whale")) {
  print("You found a whale!")
}
```
:::

3. Store the base price of a burrito as `base_burrito` with a value of 6.50. Store `main_ingredient` with a starting string of "veggie." Write a statement that will return the price of a burrito based on what a user specifies as "main_ingredient" (either "veggie", "chicken" or "steak") given the following: 

- A veggie burrito is the cost of a base burrito
- A chicken burrito costs 3.00 more than a base burrito
- A steak burrito costs 3.25 more than a base burrito

::: {.callout-important}
## Solution
```{r}
base_burrito <- 6.50
main_ingredient <- "steak"

if (main_ingredient == "veggie") {
  price = base_burrito
} else if (main_ingredient == "chicken") {
  price = base_burrito + 3.00
} else if (main_ingredient == "steak") {
  price = base_burrito + 3.25
}

print(price)
```
:::

## For loops

1. Create a new vector called `fish` that contains the values `8, 10, 12, 23` representing counts of different fish types in a fish tank (goldfish, tetras, guppies, and mollies, respectively). Write a for loop that iterates through `fish`, and returns what proportion of total fish in the tank are that species. Assume that these counts represent all fish in the tank. 

::: {.callout-important}
## Solution
```{r}
fish <- c(goldfish = 8, tetras = 10, guppies = 12, mollies = 23)

for (i in seq_along(fish)) {
  fish_prop <- fish[i] / sum(fish)
  print(fish_prop)
}
```
:::

2. Write a **for loop** that iterates over all months in `month.name` and prints "January is month 1," "February is month 2", etc.
    - **Hint:** you can index values in the `month.name` vector (e.g., try running `month.name[5]`)

::: {.callout-important}
## Solution
```{r}
month.name

for (i in seq_along(month.name)) {
  print(paste(month.name[i], "is month", i))
}
```
:::

## Biogeochemistry of Toolik Lake, North Slope of Alaska

1. Read in the data as `toolik_biochem`. Remember, you'll want to specify here how `NA` values are stored. Pipe directly into `janitor::clean_names()` following your import code to get all column names into lower snake case.

::: {.callout-important}
## Solution
```{r}
#| include: false
toolik_biochem <- read_csv(here::here("course-materials", "eod-practice", "data", "2011_Kling_Akchem.csv"), na = c(".", "NA")) |> janitor::clean_names()
```

```{r}
#| eval: false
toolik_biochem <- read_csv(here::here("data", "2011_Kling_Akchem.csv"), na = c(".", "NA")) |> janitor::clean_names()
```
:::

2. Create a subset of the data that contains only observations from the "Toolik Inlet" site, and that only contains the variables (columns) for pH, dissolved organic carbon (DOC), and total dissolved nitrogen (TDN)
    - **Hint:** see `dplyr::select()`). Store this subset as `inlet_biochem`. Make sure to look at the subset you've created. 

::: {.callout-important}
## Solution
```{r}
names(toolik_biochem) # Check variable names

inlet_biochem <- toolik_biochem |>
  filter(site == "Toolik Inlet") |>
  select(p_h, doc_u_m, tdn_u_m)
```
:::

3. Find the mean value of each column in `inlet_biochem` 3 different ways: 

a. Write a for loop from scratch to calculate the mean for each
b. Use *one other method* (e.g. `apply`, `across`, or `purrr::map_df`) to find the mean for each column.

::: {.callout-important}
## Solution
```{r}
for (i in seq_along(inlet_biochem)) {
  mean_val <- mean(inlet_biochem[[i]], na.rm = TRUE)
  print(mean_val)
}

apply(X = inlet_biochem, MARGIN = 2, FUN = mean, na.rm = TRUE)

purrr::map_df(.x = inlet_biochem, .f = mean, na.rm = TRUE)
```
:::