---
title: "Day 4: Tasks & activities - KEY"
subtitle: "Intro to functions"
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
#| message: false
#| warning: false

library(tidyverse)
library(kableExtra)
```

## For loops revisited

1. Create two sequences, one called `weekdays` that contains days of the week ("Monday", "Tuesday", "Wednesday", etc.) and one called `transects` that contains the series of transect names "Transect A", "Transect B, "Transect C". Write a nested for loop that creates a matrix containing the following: 

::: {.callout-important}
## Solution
```{r}
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")

transects <- c("Transect A", "Transect B", "Transect C")

study_matrix <- matrix(ncol = length(transects),
                       nrow = length(weekdays))

for (i in seq_along(weekdays)) {
  
  for (j in seq_along(transects)) {
    
    study <- paste0(weekdays[i], " - ", transects[j])
    study_matrix[i, j] <- study
    
  }
}
```

```{r}
#| echo: false
study_matrix_table <- study_matrix |> 
  kable() |> 
  kable_styling()

study_matrix_table
```
:::

2. Write a function called `force` that calculates a force (in Newtons), given inputs of mass (in kg) and acceleration (in $\frac{m}{s^2}$ (recall: $F = ma$), and returns a statement "The resulting force is ___ Newtons."

::: {.callout-important}
## Solution
```{r}
force <- function(mass, acceleration) {
  force_val <- mass * acceleration
  print(paste("The resulting force is", force_val, "Newtons."))
}

force(100, 2.9)
```
:::

3. The length:weight relationship for fish is: $W=aL^b$, where where L is total fish length (centimeters), W is the expected fish weight (grams), and a and b are species-dependent parameter values (shown below for several fish from Peyton et al. 2016). 

```{r}
#| echo: FALSE
fish_parms <- tribble(
  ~sci_name, ~common_name, ~a_est, ~b_est,
  "Chanos chanos", "Milkfish", 0.0905, 2.52,
  "Sphyraena barracuda", "Great barracuda", 0.0181, 3.27,
  "Caranx ignobilis", "Giant trevally", 0.0353, 3.05
)

fish_parms %>% 
  kable() %>% 
  kable_styling(full_width = FALSE)
```

Recreate the table above as a data frame stored as `fish_parms`. Then, write a function called `fish_weight` that allows a user to only enter the *common name* (argument `fish_name`) and *total length* (argument `tot_length`) (in centimeters) of a fish, to return the expected fish weight in grams. Test it out for different species and lengths. 

::: {.callout-important}
## Solution
```{r}
fish_weight <- function(fish_name, tot_length) {
  
  fish_sub <- fish_parms |> 
    filter(common_name == fish_name)
  
  wt <- fish_sub$a_est * (tot_length ^ fish_sub$b_est)
  
  return(wt)
}

fish_weight(fish_name = "Milkfish", tot_length = 57)

```
:::


4. Wave power (more accurately wave energy flux) in deep water is approximated by: 

$$P_{deep}=0.5 H^2 T$$

where $P$ is power in $\frac{kW}{m}$ (potential power per wave meter), $H$ is wave height in meters (more specifically, the *significant wave height*), and $T$ is the wave period in seconds. Learn more [here](https://en.wikipedia.org/wiki/Wave_power).

Write a function called `wave_power` that calculates potential ocean wave power given inputs of wave height and period. 

::: {.callout-important}
## Solution
```{r}
wave_power <- function(wave_height, wave_period) {
  0.5 * (wave_height ^ 2) * wave_period
}
```

```{r}
wave_heights <- seq(from = 0, to = 3, by = 0.2)

wave_power(wave_height = wave_heights, wave_period = 8)
```
:::

5. The wave energy equation changes based on ocean depth. Along the coast of Brenville, which has a very sharp shelf as the wave approaches the coast, wave energy is approximated using the deep ocean equation (the one you used above) for depths > 12 meters, and a shallow equation for depths <= 12 meters. The Brenville team estimates shallow wave power by:

$$P_{shallow}=0.81 H^2 T$$

Create a function that requires inputs of water depth, wave height and period, then returns the approximated wave power using the correct equation for the depth entered. It should also include a message (hint: use `message()` just like you would use warning!) that lets the user know if the shallow or deep water equation was used. 

::: {.callout-important}
## Solution
```{r}
brenville_waves <- function(wave_height, wave_period, depth) {
  
  if (depth > 12) {
    message("Using the deep wave equation.")
    bren_wave_energy <- 0.5 * (wave_height ^ 2) * wave_period
  }
  
  else if (depth <= 12) {
    message("Using the shallow wave equation.")
    bren_wave_energy <- 0.81 * (wave_height ^ 2) * wave_period
  }
  
  return(bren_wave_energy)
}

brenville_waves(wave_height = 5, wave_period = 10, depth = 4)
```
:::
