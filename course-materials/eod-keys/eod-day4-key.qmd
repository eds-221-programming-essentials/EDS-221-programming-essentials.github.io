---
title: "Day 4: Tasks & activities - KEY"
subtitle: "Intro to functions"
execute: 
  eval: false
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
#| message: false
#| warning: false

library(tidyverse)
```

## For loops revisited

1. Create two sequences, one called `weekdays` that contains days of the week ("Monday", "Tuesday", "Wednesday", etc.) and one called `transects` that contains the series of transect names "Transect A", "Transect B, "Transect C". Write a nested for loop that creates a matrix containing the following: 

::: {.callout-important}
## Solution
```{r}
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")

transects <- c("Transect A", "Transect B", "Transect C")

study_matrix <- matrix(ncol = length(transects),
                       nrow = length(weekdays))

for (i in seq_along(weekdays)) {
  
  for (j in seq_along(transects)) {
    
    study <- paste0(weekdays[i], " - ", transects[j])
    study_matrix[i, j] <- study
    
  }
}
```

```{r}
#| echo: true
study_matrix %>% 
  kable() %>% 
  kable_styling()
```
:::

2. Write a function called `force` that calculates a force (in Newtons), given inputs of mass (in kg) and acceleration (in $\frac{m}{s^2}$ (recall: $F = ma$), and returns a statement "The resulting force is ___ Newtons."

::: {.callout-important}
## Solution
```{r}
force <- function(mass, acceleration) {
  force_val <- mass * acceleration
  print(paste("The resulting force is", force_val, "Newtons."))
}

force(100, 2.9)
```
:::

3. The length:weight relationship for fish is: $W=aL^b$, where where L is total fish length (centimeters), W is the expected fish weight (grams), and a and b are species-dependent parameter values (shown below for several fish from Peyton et al. 2016). 

```{r}
#| echo: FALSE
fish_parms <- tribble(
  ~sci_name, ~common_name, ~a_est, ~b_est,
  "Chanos chanos", "Milkfish", 0.0905, 2.52,
  "Sphyraena barracuda", "Great barracuda", 0.0181, 3.27,
  "Caranx ignobilis", "Giant trevally", 0.0353, 3.05
)

fish_parms %>% 
  kable() %>% 
  kable_styling(full_width = FALSE)
```

Recreate the table above as a data frame stored as `fish_parms`. Then, write a function called `fish_weight` that allows a user to only enter the *common name* (argument `fish_name`) and *total length* (argument `tot_length`) (in centimeters) of a fish, to return the expected fish weight in grams. Test it out for different species and lengths. 

::: {.callout-important}
## Solution
```{r}
fish_weight <- function(fish_name, tot_length) {
  fish_sub <- filter(fish_parms, common_name == fish_name)
  wt <- fish_sub$a_est * (tot_length ^ fish_sub$b_est)
  return(wt)
}

fish_weight(fish_name = "Milkfish", tot_length = 57)

```
:::













Creating the function:
```{r, message=FALSE, warning=FALSE}
fish_weight <- function(name, length){
  i <- which(fish_parms$common_name == name)
  a<-fish_parms[i,3]
  b<-fish_parms[i,4]
  w= a *(length^b)
  return(w)
}
```

Testing:
```{r, message=FALSE, warning=FALSE}
fish_weight('Milkfish', 10)
```

## Task 4
Creating the function:
```{r, message=FALSE, warning=FALSE}
wave_power <- function(h, t){
  p= 0.5 * t * h^2
  return(p)
}
```

Creating the vector:
```{r, message=FALSE, warning=FALSE}
waves <- seq(from = 0, to = 3, by = 0.2)
```

Applying over the wave heights range:
```{r, message=FALSE, warning=FALSE}
result <- sapply(waves, wave_power, t = 8)
result
```

## Task 5
Creating the function:
```{r, message=FALSE, warning=FALSE}
wave_power <- function(d,h, t){
  if (d<=12){
     p= 0.81 * t * h^2
      message("Message: Shallow water equation was used")
  } else {
      p= 0.5 * t * h^2
      message("Message: Deep water equation was used")
  }
  return(p)
}
```

Testing:
```{r, warning=FALSE}
wave_power(10,3,1)
```

