---
title: "Day 7: Tasks & activities - KEY"
subtitle: "Wrangling continued: joins, strings, dates"
execute: 
  eval: false
editor_options: 
  chunk_output_type: console
---

## Practice joins on birds dataset

1. Read in the data sets and store the data frames as `bird_observations`, `sites`, `surveys`, and `taxalist` (it should be clear from the raw file names which is which)

::: {.callout-important}
## Solution
```{r}
#| include: false
bird_observations <- read_csv(here("course-materials", "eod-practice", "data", "knb-lter-cap_256_9", "52_pp52_birds_1.csv"))
sites <- read_csv(here("course-materials", "eod-practice", "data", "knb-lter-cap_256_9", "52_pp52_sites_1.csv"))
surveys <- read_csv(here("course-materials", "eod-practice", "data", "knb-lter-cap_256_9", "52_pp52_surveys_1.csv"))
taxalist <- read_csv(here("course-materials", "eod-practice", "data", "knb-lter-cap_256_9", "52_pp52_taxalist_1.csv"))
```

```{r}
#| eval: false
bird_observations <- read_csv(here("data", "knb-lter-cap_256_9", "52_pp52_birds_1.csv"))
sites <- read_csv(here("data", "knb-lter-cap_256_9", "52_pp52_sites_1.csv"))
surveys <- read_csv(here("data", "knb-lter-cap_256_9", "52_pp52_surveys_1.csv"))
taxalist <- read_csv(here("data", "knb-lter-cap_256_9", "52_pp52_taxalist_1.csv"))
```
:::

2. Create a subset of `bird_observations` called `birds_subset` that only contains observations for birds with species id "BHCO" and "RWBL", and from sites with site ID "LI-W" and "NU-C"

::: {.callout-important}
## Solution
```{r}
birds_subset <- bird_observations |> 
  filter(species_id %in% c("BHCO", "RWBL")) |> 
  filter(site_id %in% c("LI-W", "NU-C"))
```
:::

3. Use left join(s) to update `birds_subset` so that it also includes `sites` and `taxalist` information. Store the updated data frame as `birds_left`

::: {.callout-important}
## Solution
```{r}
birds_left <- birds_subset |> 
  left_join(sites, by = "site_id") |> 
  left_join(taxalist, by = "species_id")
```
:::

4. Write code to `full_join` the `birds_subset` and `sites` data into a new object called `birds_full`

::: {.callout-important}
## Solution
```{r}
birds_full <- birds_subset |> 
  full_join(sites, by = "site_id")
```
:::

5. Use the pipe operator to:
  - Rename the `notes` column to `bird_obs_notes` (so this doesn't conflict with `notes` in the `surveys` dataset 
  - Create a subset that contains *all observations* in the `birds` dataset, joins the taxonomic, site and survey information to it, and is finally limited to only columns `survey_date`, `common_name`, `park_name`, and `bird_count`

::: {.callout-important}
## Solution
```{r}
birds_df <- bird_observations |> 
  select(-notes) |> 
  left_join(surveys) |> 
  left_join(sites) |> 
  left_join(taxalist) |> 
  select(survey_date, park_name, common_name, bird_count)
```
:::

6. Use `lubridate::month()` to add a new column called `survey_month`, containing only the month number. Then, convert the month number to a factor (again within `mutate()`). Use `dplyr::relocate()` to move the new `survey_month` column to immediately after the `survey_date` column

::: {.callout-important}
## Solution
```{r}
birds_df <- birds_df |> 
  mutate(survey_month = lubridate::month(survey_date)) |> 
  mutate(survey_month = as.factor(survey_month)) |> 
  relocate(survey_month, .after = survey_date)
```
:::

7. Find the total number of birds observed by *park* and *month* (i.e., you'll `group_by(park_name, survey_month)`) and filter to only include parks "Lindo", "Orme", "Palomino" and "Sonrisa"

::: {.callout-important}
## Solution
```{r}
birds_park_month <- birds_df |> 
  group_by(park_name, survey_month) |> 
  summarize(total_birds = sum(bird_count, na.rm = TRUE)) |> 
  ungroup() |> 
  filter(park_name %in% c("Lindo", "Orme", "Palomino", "Sonrisa"))
```
:::


8. Store the data frame as `alarm_report`

::: {.callout-important}
## Solution
```{r}
alarm_report <- data.frame(
  stringsAsFactors = FALSE,
  date = c("2020-03-14","2020-03-15","2020-04-10", "2020-04-18"),
  building = c("Engineering-North","Bren Hall", "Engineering-South","Engr-North"),
  alarm_message = c("10:02am -- HVAC system down, facilities management alerted",
                    "8:24am -- Elevator North out of service",
                    "12:41am -- Fire alarm, UCSB fire responded and cleared",
                    "9:58pm -- Campus point emergency siren, UCPD responded")
  )
```
:::

9. Practice working with strings by writing code to update `alarm_report` as follows (these can be separate, or all as part of a piped sequence): 

  - Replace the "Engr" with "Engineering" in the `building` column
  - Separate the `building` column into two separate columns, `building` and `wing`, separated at the dash
  - Only keep observations with the word "responded" in the `alarm_message` column
  - Separate the message *time* from the rest of the message by separating at `--`
  - Convert the date column to a Date class using `lubridate`
  
::: {.callout-important}
## Solution
```{r}
alarm_report_update <- alarm_report %>% 
  mutate(building = str_replace(building, pattern = "Engr", replacement = "Engineering")) %>% 
  separate(col = building, into = c("building", "wing"), sep = "-") %>% 
  filter(str_detect(alarm_message, pattern = "responded")) %>% 
  separate(col = alarm_message, into = c("time", "message"), sep = "--") %>% 
  mutate(date = lubridate::ymd(date))
```
:::
