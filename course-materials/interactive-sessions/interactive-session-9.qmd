---
title: "Interactive Session 9"
subtitle: "`{reprex}`, tables, and a `ggtheme` package"
editor_options: 
  chunk_output_type: console
---

```{r, warning = FALSE, message = FALSE}
#| include: false
library(tidyverse)
library(palmerpenguins)
library(lubridate)
library(kableExtra)
library(janitor)
```

## 1. Setup

- Create a new version-controlled R Project called `eds221-m2021-day9-interactive` 
- Install the `kableExtra` package
- Create a new R Markdown document in the project
- Attach the following packages in the setup chunk: 
    - `tidyverse`
    - `kableExtra`
    
## 2. Making a reproducible example: `{reprex}`

Making a minimum viable example is often the best way to troubleshoot problematic code when you can't figure out a solution quickly -- and is *definitely* the best way to share an example of something you're struggling with so you're most likely to get help. If people can't run or play with your code, it's much less likely they'll be able to offer a solution. 

You probably already have `{reprex}` (part of the `tidyverse`). Copy code to clipboard and run `reprex()` to make one! 

Some guidelines:
 
- Ruthlessly simplify
- Consider using or making a subset of data (possibly with datapasta, tribble)
- Include library calls (e.g. `library(janitor)` in the reprex)
- Make the minimum viable example of the thing that's not working
- Copy to clipboard
- Run `reprex()` to create markdown-formatted (e.g. for GitHub issues) or `reprex(venue = "slack")` if posting to Slack (click "Add formatting" or <kbd>Cmd-Shift-F</kbd> for formatting)

See more: 

- https://community.rstudio.com/t/faq-how-to-do-a-minimal-reproducible-example-reprex-for-beginners/23061
- https://reprex.tidyverse.org/articles/reprex-dos-and-donts.html

### Practice with `reprex`

Let's create some code that throws an error. We'll try to plot the `palmerpenguins`, but forget to use the `aes()` function.

```{r}
#| eval: false
ggplot(data = penguins, x = flipper_length, y = body_mass_g) +
  geom_point()
```

We try to troubleshoot on our own, but can't figure it out so we create a reprex!

Install and load the reprex package.

```{r}
#| eval: false
install.packages("reprex")
library(reprex)
```

First, we want to create a small amount of data to reproduce our error to include in our reprex. We'll use `dplyr` functions to limit to just the columns we're plotting and a few rows and then use `datapasta` to create a little data frame with that data.

```{r}
#| eval: false
penguins_subset <- penguins %>%
  select(flipper_length_mm, body_mass_g) %>%
  slice_head(n = 5)

datapasta::df_paste(penguins_subset)
```

This should add the following to our script:

```{r}
#| eval: false
data.frame(flipper_length_mm = c(181L, 186L, 195L, NA, 193L),
           body_mass_g = c(3750L, 3800L, 3250L, NA, 3450L))
```

Now, we need to create a small chunk of code to reproduce our error.

```{r}
#| eval: false
penguins <- data.frame(
  flipper_length_mm = c(181L, 186L, 195L, NA, 193L),
  body_mass_g = c(3750L, 3800L, 3250L, NA, 3450L)
  )

ggplot(data = penguins, x = flipper_length, y = body_mass_g) +
  geom_point()
```

Prove to yourself that it throws the same error. Then, copy that chunk of code into your clipboard (<kbd>Cmd + C</kbd>) and run `reprex()` in your console. Your reproducible example is now loaded into your clipboard. Find your neighbor on Slack and send them your reprex as a message!

Now, practice a version on your own.

## 3. A few new wrangling tools: `dplyr::across()` & `janitor::get_dupes()`

### `janitor::get_dupes()` to check for duplicates

```{r}
#| results: 'hide'
#| warning: false
#| message: false
dupes <- get_dupes(starwars) # Across all variables (exact match across all columns?)

# Check for duplicate values in the `2000` column
dupes_2 <- starwars %>% 
  get_dupes(homeworld)

# Check for duplicates in the homeworld and species column
dupes_3 <- starwars %>% 
  get_dupes(homeworld, species)
```

### `dplyr::across()` - operations across columns

Mutate across multiple columns: 
```{r}
#| results: 'hide'
#| warning: false
#| message: false
starwars %>% 
  mutate(across(where(is.character), tolower))
```

You can use it within `group_by() + summarize()`:
```{r}
#| results: 'hide'
#| warning: false
#| message: false
starwars %>% 
  group_by(homeworld) %>% 
  summarise(across(where(is.numeric), mean, na.rm = TRUE), count = n())
```

Another example: 
```{r}
#| results: 'hide'
#| warning: false
#| message: false
mtcars %>% 
  group_by(cyl) %>% 
  summarize(across(drat:qsec, mean))
```


## 4. Tables with `{kable}` and `{kableExtra}`

We can produce finalized tables in R Markdown in a number of ways - see a bunch of them in David Keyes' post [*How to make beautiful tables in R.*](https://rfortherestofus.com/2019/11/how-to-make-beautiful-tables-in-r/)

We'll just use one tool: `kable` + `kableExtra` to make nice html tables.

Try it out of the box (knit to see the table): 
```{r}
#| results: 'hide'
#| warning: false
#| message: false
penguins %>% 
  group_by(species, island) %>% 
  summarize(mean_mass = mean(body_mass_g, na.rm = TRUE)) %>% 
  kable(col.names = c("Species", "Island", "Body mass (g)")) %>% 
  kable_styling(bootstrap_options = "striped", full_width = FALSE)
```

<!--

## 5. A package for your `ggplot` theme

### Creating a package

a. In RStudio, create a new R Project that is an R Package (New Project > New directory > R Package). Make your package name something specific to you, e.g. `themes_yourname` (like `themes_teddy`). Make it a version controlled repo by running `usethis::use_git()` and `usethis::use_github()` (or w/ CLI). 


b. Check out the existing infrastructure for your R package, which currently contains a single function hello(), which prints “Hello, world!” Check out the R/hello.R file to see where that function is created.  

c. In the Build tab, click Install and Restart. You should see that the package is automatically attached in the Console. 

d. Run the hello() function in the Console, to see that it works. 

e. Create a new R **script** (.R). Copy and paste the following placeholder code into your R script. Then update the colors (in quotations) to colors that R will recognize (or hexidecimals) and change the function name to **theme_yourname** (e.g. theme_allison). You can also add other options within `theme()` to further customize your theme.

``` 
my_theme <- function() {
  theme(
    panel.background = element_rect(fill = "yellow"),
    panel.grid.major.x = element_line(colour = "purple", linetype = 3, size = 0.5),
    panel.grid.minor.x = element_blank(),
    panel.grid.major.y =  element_line(colour = "cyan4", linetype = 3, size = 0.5),
    axis.text = element_text(colour = "red"),
    axis.title = element_text(colour = "orange")
  )
}
```

Save the R script in to the R/ folder (with the file name matching the function name). 

f. Put your cursor anywhere in the function code within your R script. In the top menu of RStudio, select Code > Insert Roxygen skeleton. The information added is important - it specifies the params (arguments of the function) and more that will appear in the documentation, which we’ll create next. Save the .R file, which now contains your function and the Roxygen information. 

g. Document the function by running `devtools::document()` in the Console. This will create a new .Rd file in the man/ folder, containing important documentation information about your function. 

h. Press `Build > Install and Restart`. In the Console, run `?function_name`, replacing function_name there instead. It will bring up the documentation, and let you know your function exists! Now go ahead and try to *use* your function by making a graph in the Console. 

```
library(tidyverse)

ggplot(data = msleep, aes(x = sleep_total, y = sleep_rem)) +
  geom_point() 
  + THEME_NAME()
```

i. Once you confirm it's working, push your changes back to your repo on GitHub. Share your repo "username/reponame" with your neighbor so they can install your package from GitHub (recall: using `remotes::install_github("username/reponame")`). Install your neighbor's theming package, check which functions exist by running `help(package = "packagename")` in the Console, then make a ggplot graph that uses your *neighbor's* ggplot theme. Done!

-->

::: {.center-text .body-text-xl .teal-text}
End Interactive Session 9
:::

